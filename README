estring is a set of erlang string functions

supported functions:

    begins_with(String, SubString)
        returns true if String begins with SubString
    ends_with(String, SubString)
        returns true if String ends with SubString
    contains(String, SubString)
        returns true if String contains SubString
    edit_distance(String1, String2)
    edit_distance(String1, String2, CaseInsensitive)
        returns the damerau-levenshtein edit distance between String1 and String2.
        edit_distance/2 will call edit_distance/3 with CaseInsensitive == false.
    similarity(Source, Target)
    similarity(Source, Target, CaseInsensitive)
        returns a score representing how similar Source is to Target based
        on the edit distance and the length of Target. similarity/2 will call
        similarity/3 with CaseInsensitive == false.
    similarity(Source, Target, CaseInsensitive, LowerLimit)
        like the above with a short circuit performance enhancement. a simple
        heuristic is used to estimate the upper bound for similarity between the
        Source and Target strings. If the estimate exceeds LowerLimit, then
        {error, limit_reached} is returned immediately. Otherwise {ok, Score} or
        {error, limit_reached} is returned based on a call to similarity/3.
    strip(String)
        returns a string, where leading and trailing whitespace (" ",\n\t\f\r)
        has been removed
    strip_split(String, SeparatorString) ->
        helper function - less verbose way of calling:
        re:split(estring:strip(String), SeparatorString, [{return, list}])
    squeeze(String)
    squeeze(String, Char)
        returns a string where runs of the same character are replaced by Char.
        Char can be a string or an integer, e.g. "e" or $e. squeeze/1 will call
        squeeze/2 with " " for Char.
    is_integer(String)
        returns true if String is is a string representation of an integer,
        e.g. "35"
    format(Format, Data) ->
        helper function - less verbose way of calling:
        lists:flatten(io_lib:format(Format, Data))
    random(N) ->
        returns a random alphanumeric string of length N

examples:

    estring:begins_with("fancy pants", "fancy").
        true
    estring:ends_with("fancy pants", "pants").
        true
    estring:contains("los angeles", "angel").
        true
    estring:edit_distance("cars", "bats").
        2
    estring:edit_distance("receive", "RECIEVE", true).
        1
    estring:similarity("epsn sporrts", "espn sports").
        0.8181818181818182
    estring:similarity("edit distance", "Edit Distance", true).
        1.0
    estring:is_integer("35").
        true
    estring:is_integer("35.4").
        false
    estring:format("~w bottles of ~s on the wall", [99, "beer"]).
        "99 bottles of beer on the wall"
    estring:strip(" clean me \n").
        "clean me"
    estring:squeeze("the cow says moooo", "o").
        "the cow says mo"
    estring:squeeze("i need   a  squeeze!").
        "i need a squeeze!"
    estring:strip_split("\tfirst,second,third\n", ",").
        ["first","second","third"]
    estring:random(20).
        "c3ZYupXbbcd9ILxO23WJ"
